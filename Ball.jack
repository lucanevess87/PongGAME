class Ball {
	field int x,y;     			//posição da bola na tela em pixels
	field int distlastx, distlasty;     //distancia da ultimo ponto que se encontrava em pixels

	field int d, straightD, diagonalD;       		//movimento em linha
	field boolean invert, positivex, positivey; 		// movimento em linha em boolean function

	field int leftWall, rightWall, topWall, bottomWall;    //paredes
	field int wall;										  // ultima parede que a bola rebateu

	constructor Ball new(int Ax, int Ay, int AleftWall, int ArightWall, int AtopWall, int AbottomWall) {
		let x = Ax;
		let y = Ay;
		let leftWall = AleftWall;
		let rightWall = ArightWall - 6;  //por conta do tamanho da bola
		let topWall = AtopWall;
		let bottomWall = AbottomWall - 6;
		let wall = 0;                    // nao bateu em nenhuma parede ainda
		do show();						// funcao que mostra a bola
		return this;
	}

	/** Abre espaço na memória jogando fora o que foi criado e não será mais utilizado */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void show() {
    	do Screen.setColor(true);       //aciona cor visivel no monitor e desenha
    	do draw();
    	return;
    }

    method void erase() {
    	do Screen.setColor(false);    //aciona a cor de fundo e desenha com ela, ou seja, apaga
    	do draw();
    	return;
    }

    method void draw() {
    	do Screen.drawRectangle(x, y, x + 5, y + 5);       //desenha bola
    	return;
    }

    /** Returns the ball's left edge. */
    method int getLeft() {
        return x;
    }

    /** Returns the ball's right edge. */
    method int getRight() {
        return x + 5;
    }


    /** computa e posiciona o destino da bola. */
    method void ballDestination(int destx, int desty) {
    	var int dx, dy, temp;
    	let distlastx = destx - x;        // distancia da ultima localização até a nova
    	let distlasty = desty - y;		   // distancia da ultima localização até a nova
    	let dx = Math.abs(distlastx);       // math abs = modulo = devolve valor absoluto indep de sinal
    	let dy = Math.abs(distlasty);
    	let invert = (dx < dy);             // invert pode ser true ou false, true se dx < dy
    	
    	if (invert) {                      // true
    		let temp = dx; 				  //troca
    		let dx = dy;
    		let dy = temp;
    		let positivex = (y < desty);
    		let positivey = (x < destx);
    	}

    	else {								
    		let positivex = (x < destx);
    		let positivey = (y < desty);
    	}

    	let d = (2 * dy) - dx;
    	let straightD = 2 * dy;
    	let diagonalD = 2 * (dy -dx);

    	return;

	 }

	method int move() {
		
		do erase();

        if (d < 0) { let d = d + straightD; }
        else {
            let d = d + diagonalD;

            if (positivey) {
                if (invert) { let x = x + 4; }
                else { let y = y + 4; }
            }
            else {
                if (invert) { let x = x - 4; }
                else { let y = y - 4; }
            }
	    }

        if (positivex) {
            if (invert) { let y = y + 4; }
            else { let x = x + 4; }
	    }
	    else {
            if (invert) { let y = y - 4; }
            else { let x = x - 4; }
	    }

	    if (~(x > leftWall)) {
	        let wall = 1;    
	        let x = leftWall;
	    }
        if (~(x < rightWall)) {
	        let wall = 2;    
	        let x = rightWall;
	    }
        if (~(y > topWall)) {
            let wall = 3;    
	        let y = topWall;
        }
        if (~(y < bottomWall)) {
            let wall = 4;    
	        let y = bottomWall;
        }

	    do show();

	    return wall;
	}

	method void bounce(int bouncingDirection) {

		var int newx, newy, divdistlastx, divdistlasty, factor;

	    // dividindo por 10 por serem muito grandes
        let divdistlastx = distlastx / 10;
        let divdistlasty = distlasty / 10;
	    if (bouncingDirection = 0) {let factor = 10;}
	    else {
	        if (((~(distlastx < 0)) & (bouncingDirection = 1)) | (( distlastx < 0) & (bouncingDirection = (-1)))) {
                let factor = 20; // bounce direction is in ball direction
            }
	        else { let factor = 5; } // bounce direction is against ball direction
	    }

	    if (wall = 1) {
	        let newx = 506;
	        let newy = ( divdistlasty * (-50)) / divdistlastx;
            let newy = y + (newy * factor);
	    }
        else {
            if (wall = 2) {
                let newx = 0;
                let newy = (divdistlasty * 50) / divdistlastx;
                let newy = y + (newy * factor);
	        }
	        else {
                if (wall = 3) {
		            let newy = 250;
		            let newx = ( divdistlastx * (-25)) / divdistlasty;
                    let newx = x + (newx * factor);
		        }
                else { // assume wall = 4
		            let newy = 0;
		            let newx = (divdistlastx * 25) / divdistlasty;
                    let newx = x + (newx * factor);
		        }
            }
        }

        do ballDestination(newx, newy);
        return;
    }
}

