class PongGame {
	static PongGame instance;
	field Bat bat;            //retangulo
	field Ball ball;		  // bola
	field int wall;		      // atual parede
	field boolean exit;       //se for true, game over
	field int score;		  // a atual pontuacao
	field int lastWall;		  // ultima parede que a bola rebatida
	field int batWidth;		  // atual largura do retangulo

	constructor PongGame new() {
		do Screen.clearScreen();
		let batWidth = 50;
		let bat = Bat.new(230, 229, batWidth, 7);
		let ball = Ball.new(253, 222, 0, 511, 0, 229);
		do ball.ballDestination(400,0);
		do Screen.drawRectangle(0,238, 511, 240);
		do Output.moveCursor(22,0);
		do Output.printString("Score: 0");

		let exit = false;
		let score = 0;
		let wall = 0;
		let lastWall = 0;

		return this;
	}

	 method void dispose() {
        do bat.dispose();
	    do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** funcao que guarda novo jogo PongGame. */
    function void newInstance() {
        let instance = PongGame.new();
        return;
    }
    
    /** funcao que retorna o novo jogo que foi salvo em newInstnce(). */
    function PongGame getInstance() {
        return instance;
    }

    /** Inicia o jogo e relaciona teclas apertadas com as funções
     *  direita e esquerda - direcoes do retangulo. */
    method void run() {
        var char key;

        while (~exit) {
            // enquanto exit for falso
            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();
                do bat.move();
                do moveBall();
                do Sys.wait(50);
            }

            if (key = 130) { do bat.setDirection(1); }
	        else {
	            if (key = 132) { do bat.setDirection(2); }
		        else {
                    if (key = 140) { let exit = true; }
		        }
            }

            // enquanto tecla estiver sendo segurada
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
                do bat.move();
                do moveBall();
                do Sys.wait(50);
            }
        }

	    if (exit) {
            do Output.moveCursor(10,27);
	        do Output.printString("Game Over");
	    }
            
        return;
    }

    /**
     * Movimento da bola e rebatida na parede
     * Se bater no retangulo, score + 1
     * diminui -2 a width do retangulo(bat)
     */
    method void moveBall() {
        var int bouncingDirection, batLeft, batRight, ballLeft, ballRight;

        let wall = ball.move();

        if ((wall > 0) & (~(wall = lastWall))) {
            let lastWall = wall;
            let bouncingDirection = 0;
            let batLeft = bat.getLeft();
            let batRight = bat.getRight();
            let ballLeft = ball.getLeft();
            let ballRight = ball.getRight();
  
            if (wall = 4) {
                let exit = (batLeft > ballRight) | (batRight < ballLeft);
                if (~exit) {
                    if (ballRight < (batLeft + 10)) { let bouncingDirection = -1; }
                    else {
                        if (ballLeft > (batRight - 10)) { let bouncingDirection = 1; }
                    }

                    let batWidth = batWidth - 2;
                    do bat.setWidth(batWidth);      
                    let score = score + 1;
                    do Output.moveCursor(22,7);
                    do Output.printInt(score);
                }
            }
            do ball.bounce(bouncingDirection);
        }
        return;
    }
}